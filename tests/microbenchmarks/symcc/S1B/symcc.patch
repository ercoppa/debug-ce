diff --git a/compiler/Runtime.cpp b/compiler/Runtime.cpp
index bb51ff0..9ff1854 100644
--- a/compiler/Runtime.cpp
+++ b/compiler/Runtime.cpp
@@ -178,7 +178,7 @@ bool isInterceptedFunction(const Function &f) {
   static const StringSet<> kInterceptedFunctions = {
       "malloc",   "calloc",  "mmap",    "mmap64", "open",   "read",    "lseek",
       "lseek64",  "fopen",   "fopen64", "fread",  "fseek",  "fseeko",  "rewind",
-      "fseeko64", "getc",    "ungetc",  "memcpy", "memset", "strncpy", "strchr",
+      "fseeko64", "getc",    "ungetc",  "memcpy", /* "memset", */ "strncpy", "strchr",
       "memcmp",   "memmove", "ntohl",   "fgets",  "fgetc",  "getchar", "openat",
 #if SYMCC_FIX_ISSUE_SPRINTF
       "sprintf"
diff --git a/compiler/Symbolizer.cpp b/compiler/Symbolizer.cpp
index 70843e1..0b2722b 100644
--- a/compiler/Symbolizer.cpp
+++ b/compiler/Symbolizer.cpp
@@ -223,11 +223,12 @@ void Symbolizer::handleIntrinsicCall(CallBase &I) {
 
     // The comment on memcpy's length parameter applies analogously.
 
+    /*
     IRB.CreateCall(runtime.memset,
                    {I.getOperand(0),
                     getSymbolicExpressionOrNull(I.getOperand(1)),
                     IRB.CreateZExtOrTrunc(I.getOperand(2), intPtrType)});
-
+    */
 #if DEBUG_CONSISTENCY_CHECK
     addConsistencyCheck(I.getOperand(1), getSymbolicExpressionOrNull(I.getOperand(1)), IRB);
 #endif
